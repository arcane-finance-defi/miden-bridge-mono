# BASIC FUNGIBLE FAUCET CONTRACT
# =================================================================================================
# This is a basic fungible faucet smart contract.
#
# It allows the owner of the faucet to mint, distribute, and burn tokens. Token metadata is stored
# in account storage at position 1 as [max_supply, decimals, token_symbol, 0], where:
# - max_supply is the maximum supply of the token.
# - decimals are the decimals of the token.
# - token_symbol as three chars encoded in a Felt.
use.miden::account
use.miden::asset
use.miden::faucet
use.miden::tx
use.miden::note
use.miden::contracts::auth::basic

#CONSTANTS
# =================================================================================================
const.PRIVATE_NOTE=2
const.BRIDGE_EVENT_TAG={bridge_tag}

const.BRIDGE_NOTE_CODE_COMMITMENT_FELT1={bridge_note_code_commitment_felt_1}
const.BRIDGE_NOTE_CODE_COMMITMENT_FELT2={bridge_note_code_commitment_felt_2}
const.BRIDGE_NOTE_CODE_COMMITMENT_FELT3={bridge_note_code_commitment_felt_3}
const.BRIDGE_NOTE_CODE_COMMITMENT_FELT4={bridge_note_code_commitment_felt_4}

const.SERIAL_NUM_SLOT=3
const.INPUTS_SLOT=4

#ERRORS
# =================================================================================================

# Distribute would cause the maximum supply to be exceeded
const.ERR_FUNGIBLE_ASSET_DISTRIBUTE_WOULD_CAUSE_MAX_SUPPLY_TO_BE_EXCEEDED=0x00020201

# CONSTANTS
# =================================================================================================

# The slot in this component's storage layout where the metadata is stored.
const.METADATA_SLOT=0

# Basic authentication for the faucet owner.
export.basic::auth_tx_rpo_falcon512

#! Distributes freshly minted fungible assets to the provided recipient.
#!
#! Inputs:  [amount, tag, aux, note_type, execution_hint, RECIPIENT, pad(7)]
#! Outputs: [note_idx, pad(15)]
#!
#! Where:
#! - amount is the amount to be minted and sent.
#! - tag is the tag to be included in the note.
#! - aux is the auxiliary data to be included in the note.
#! - note_type is the type of the note that holds the asset.
#! - execution_hint is the execution hint of the note that holds the asset.
#! - RECIPIENT is the recipient of the asset, i.e.,
#!   hash(hash(hash(serial_num, [0; 4]), script_root), input_commitment).
#! - note_idx is the index of the output note.
#!   This cannot directly be accessed from another context.
#!
#! Panics if:
#! - the transaction is being executed against an account that is not a fungible asset faucet.
#! - the total issuance after minting is greater than the maximum allowed supply.
#!
#! Invocation: call
export.distribute.4
    # get max supply of this faucet. We assume it is stored at pos 3 of slot 1
    push.METADATA_SLOT exec.account::get_item drop drop drop
    # => [max_supply, amount, tag, aux, note_type, execution_hint, RECIPIENT, pad(7)]

    # get total issuance of this faucet so far and add amount to be minted
    exec.faucet::get_total_issuance
    # => [total_issuance, max_supply, amount, tag, aux, note_type, execution_hint, RECIPIENT,
    #     pad(7)]

    # compute maximum amount that can be minted, max_mint_amount = max_supply - total_issuance
    sub
    # => [max_supply - total_issuance, amount, tag, aux, note_type, execution_hint, RECIPIENT,
    #     pad(7)]

    # check that amount =< max_supply - total_issuance, fails if otherwise
    dup.1 gte assert.err=ERR_FUNGIBLE_ASSET_DISTRIBUTE_WOULD_CAUSE_MAX_SUPPLY_TO_BE_EXCEEDED
    # => [amount, tag, aux, note_type, execution_hint, RECIPIENT, pad(7)]

    # creating the asset
    exec.asset::create_fungible_asset
    # => [ASSET, tag, aux, note_type, execution_hint, RECIPIENT, pad(7)]

    # mint the asset; this is needed to satisfy asset preservation logic.
    exec.faucet::mint
    # => [ASSET, tag, aux, note_type, execution_hint, RECIPIENT, pad(7)]

    # store and drop the ASSET
    loc_storew.0 dropw
    # => [tag, aux, note_type, execution_hint, RECIPIENT, pad(7)]

    # create a note
    exec.tx::create_note
    # => [note_idx, pad(15)]

    # load the ASSET and add it to the note
    movdn.4 loc_loadw.0 exec.tx::add_asset_to_note movup.4
    # => [note_idx, ASSET, pad(11)]
end

#! Burns fungible assets.
#!
#! Inputs:  [ASSET, pad(12)]
#! Outputs: [pad(16)]
#!
#! Where:
#! - ASSET is the fungible asset to be burned.
#!
#! Panics if:
#! - the transaction is executed against an account which is not a fungible asset faucet.
#! - the transaction is executed against a faucet which is not the origin of the specified asset.
#! - the amount about to be burned is greater than the outstanding supply of the asset.
#!
#! Invocation: call
export.burn
    # burning the asset
    exec.faucet::burn
    # => [ASSET, pad(12)]

    # increments the nonce (anyone should be able to call that function)
    push.1 exec.account::incr_nonce
    # => [ASSET, pad(12)]

    # clear the stack
    dropw
    # => [pad(16)]
end

#! Burns fungible assets and emits public notes with BRIDGE_EVENT tag and event payload in its inputs
#!
#! Inputs: 
#!   - OUTPUT_NOTE_SERIAL_NUM
#!   - ASSET
#!   - dest_chain_id
#!   - dest_chain_addr_felt1
#!   - dest_chain_addr_felt2
#!   - dest_chain_addr_felt3
#!   - calldata_bytes_length
#!   - calldata
#!   - call_addr_felt1
#!   - call_addr_felt2
#!   - call_addr_felt3
#! Outputs: [pad(16)]
#!
#! Where:
#! - ASSET is the fungible asset to be burned.
#!
#! Panics if:
#! - the transaction is executed against an account which is not a fungible asset faucet.
#! - the transaction is executed against a faucet which is not the origin of the specified asset.
#! - the amount about to be burned is greater than the outstanding supply of the asset.
#!
#! Invocation: call
export.bridge.4

    mem_storew.SERIAL_NUM_SLOT dropw

    # burning the asset
    exec.faucet::burn
    # => [ASSET, ...]

    # increments the nonce (anyone should be able to call that function)
    push.1 exec.account::incr_nonce
    # => [ASSET, pad(12)]

    dup.8 add.12
    # => [inputs_num, ...]

    u32divmod.4
    # => [input_num mod 4, input_num / 4, input_num, ...]
    dup neq.0
    if.true
        swap
        add.1
        swap
    end

    loc_store.3 dup dup loc_store.1 loc_store.2 neq.0
    while.true
        loc_load.2 loc_load.1 sub push.INPUTS_SLOT add
        mem_storew
        dropw
        loc_load.1 sub.1 dup loc_store.1
        eq.0
        if.true
            loc_load.3
            neq.0
            while.true
                push.0 movdn.2
                loc_load.3 sub.1 loc_store.3
                loc_load.3 neq.0
            end
        end
        loc_load.1 neq.0
    end

    # Pad to 8 elements
    loc_load.2 u32mod.2
    if.true
      padw loc_load.2 add.1 push.INPUTS_SLOT add mem_storew
      dropw
      loc_load.2 add.1 loc_store.2
    end

    loc_load.2 mul.4 push.INPUTS_SLOT
    exec.note::compute_inputs_commitment
    # => [INPUTS_COMMITMENT, ...]

    push.BRIDGE_NOTE_CODE_COMMITMENT_FELT1.BRIDGE_NOTE_CODE_COMMITMENT_FELT2.BRIDGE_NOTE_CODE_COMMITMENT_FELT3.BRIDGE_NOTE_CODE_COMMITMENT_FELT4
    # => [SCRIPT_COMMITMENT, INPUTS_COMMITMENT]

    mem_loadw.SERIAL_NUM_SLOT
    # => [SERIAL_NUM, SCRIPT_ROOT, INPUTS_COMMITMENT]

    exec.tx::build_recipient_hash
    # => [RECIPIENT]

    push.1.1.0.BRIDGE_EVENT_TAG
    # => [tag, aux, note_type, execution_hint, RECIPIENT]
    exec.tx::create_note
    # => [note_idx, pad(15)]
end